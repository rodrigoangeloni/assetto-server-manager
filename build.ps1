#!/usr/bin/env pwsh
# Script de Compilaci√≥n Autom√°tica para Assetto Server Manager
# Compatible con Windows PowerShell

Write-Host "üî® Iniciando compilaci√≥n de Assetto Server Manager..." -ForegroundColor Green
Write-Host "=================================================" -ForegroundColor Cyan

# Verificar que estamos en el directorio correcto
if (-not (Test-Path "go.mod")) {
    Write-Host "‚ùå Error: No se encontr√≥ go.mod. Aseg√∫rate de estar en la ra√≠z del proyecto." -ForegroundColor Red
    exit 1
}

# Configurar variables de entorno
Write-Host "‚öôÔ∏è Configurando variables de entorno..." -ForegroundColor Yellow
$env:GO111MODULE = 'on'
$env:CGO_ENABLED = '0'

# Verificar dependencias instaladas
Write-Host "üîç Verificando dependencias..." -ForegroundColor Yellow

try {
    $goVersion = go version
    Write-Host "‚úÖ Go: $goVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Go no est√° instalado o no est√° en PATH" -ForegroundColor Red
    exit 1
}

try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js no est√° instalado o no est√° en PATH" -ForegroundColor Red
    exit 1
}

try {
    $npmVersion = npm --version
    Write-Host "‚úÖ npm: v$npmVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå npm no est√° instalado o no est√° en PATH" -ForegroundColor Red
    exit 1
}

try {
    make --version | Out-Null
    Write-Host "‚úÖ Make est√° disponible" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Make no est√° instalado. Inst√°lalo con: choco install make" -ForegroundColor Red
    exit 1
}

Write-Host ""

# Paso 1: Instalar dependencias Go
Write-Host "üì¶ Paso 1: Instalando dependencias de Go..." -ForegroundColor Yellow
try {
    go mod tidy
    Write-Host "‚úÖ Dependencias Go instaladas" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error instalando dependencias Go" -ForegroundColor Red
    exit 1
}

# Instalar herramienta esc
Write-Host "üîß Instalando herramienta esc..." -ForegroundColor Yellow
try {
    go install github.com/mjibson/esc@latest
    Write-Host "‚úÖ Herramienta esc instalada" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error instalando esc" -ForegroundColor Red
    exit 1
}

Write-Host ""

# Paso 2: Compilar frontend
Write-Host "üé® Paso 2: Compilando frontend..." -ForegroundColor Yellow
Push-Location "cmd\server-manager\typescript"

try {
    Write-Host "üì¶ Instalando dependencias npm..." -ForegroundColor Cyan
    npm install --legacy-peer-deps
    
    Write-Host "üèóÔ∏è Ejecutando gulp build..." -ForegroundColor Cyan
    npx gulp build
    
    Write-Host "‚úÖ Frontend compilado exitosamente" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error compilando frontend" -ForegroundColor Red
    Pop-Location
    exit 1
}

Pop-Location
Write-Host ""

# Paso 3: Embebir assets
Write-Host "üìÅ Paso 3: Embebiendo assets..." -ForegroundColor Yellow
Push-Location "cmd\server-manager"

try {
    make asset-embed
    Write-Host "‚úÖ Assets embebidos exitosamente" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error embebiendo assets" -ForegroundColor Red
    Pop-Location
    exit 1
}

Write-Host ""

# Paso 4: Compilar aplicaci√≥n
Write-Host "‚öôÔ∏è Paso 4: Compilando aplicaci√≥n..." -ForegroundColor Yellow

try {
    # Compilar para Windows
    Write-Host "üñ•Ô∏è Compilando para Windows..." -ForegroundColor Cyan
    go build -o server-manager.exe
    
    # Compilar para Linux
    Write-Host "üêß Compilando para Linux..." -ForegroundColor Cyan
    $env:GOOS = "linux"
    $env:GOARCH = "amd64"
    go build -o server-manager-linux
    
    # Restaurar variables para Windows
    $env:GOOS = "windows"
    $env:GOARCH = "amd64"
    
    Write-Host "‚úÖ Aplicaci√≥n compilada para ambas plataformas" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error compilando aplicaci√≥n" -ForegroundColor Red
    Pop-Location
    exit 1
}

Write-Host ""

# Paso 5: Configuraci√≥n post-compilaci√≥n
Write-Host "üìã Paso 5: Configuraci√≥n post-compilaci√≥n..." -ForegroundColor Yellow

# Crear archivo de configuraci√≥n si no existe
if (-not (Test-Path "config.yml")) {
    Copy-Item "config.example.yml" "config.yml"
    Write-Host "‚úÖ Archivo config.yml creado desde ejemplo" -ForegroundColor Green
} else {
    Write-Host "‚ÑπÔ∏è config.yml ya existe, no se sobrescribe" -ForegroundColor Cyan
}

# Crear estructura de directorios de Assetto Corsa
Write-Host "üìÇ Creando estructura de directorios..." -ForegroundColor Cyan
try {
    New-Item -ItemType Directory -Force -Path "assetto\content\tracks", "assetto\content\cars", "assetto\system" | Out-Null
    Write-Host "‚úÖ Estructura de directorios creada" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Algunos directorios ya existen" -ForegroundColor Yellow
}

# Crear archivo acServer.exe falso si no existe
if (-not (Test-Path "assetto\acServer.exe")) {
    "" | Out-File -FilePath "assetto\acServer.exe" -Encoding utf8
    Write-Host "‚úÖ Archivo acServer.exe falso creado" -ForegroundColor Green
}

Pop-Location
Write-Host ""

# Paso 6: Crear releases
Write-Host "üì¶ Paso 6: Creando releases..." -ForegroundColor Yellow
Push-Location "cmd\server-manager"

try {
    # Crear directorios de build
    New-Item -ItemType Directory -Force -Path "build\linux", "build\windows" | Out-Null
    
    # Copiar archivos para release de Linux
    Copy-Item "config.example.yml" "build\linux\config.yml"
    Copy-Item "server-manager-linux" "build\linux\server-manager"
    
    # Copiar archivos para release de Windows
    Copy-Item "config.example.yml" "build\windows\config.yml"
    Copy-Item "server-manager.exe" "build\windows\"
    
    # Copiar documentaci√≥n
    Copy-Item "..\..\LICENSE" "build\LICENSE.txt"
    Copy-Item "..\..\CHANGELOG.md" "build\CHANGELOG.txt"
    Copy-Item "..\..\INSTALL.txt" "build\"
    Copy-Item "..\..\README.md" "build\README.txt"
    Copy-Item "..\..\BUILD_GUIDE.md" "build\"
    
    Write-Host "‚úÖ Releases creados en build/linux y build/windows" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Error creando releases (no cr√≠tico)" -ForegroundColor Yellow
}

Pop-Location
Write-Host ""

# Resumen final
Write-Host "üéâ ¬°COMPILACI√ìN COMPLETADA EXITOSAMENTE!" -ForegroundColor Green
Write-Host "=========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìÅ Archivos generados:" -ForegroundColor White
Write-Host "  ‚Ä¢ cmd\server-manager\server-manager.exe     (Windows)" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ cmd\server-manager\server-manager-linux   (Linux)" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ cmd\server-manager\config.yml             (Configuraci√≥n)" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ cmd\server-manager\build\                 (Releases completos)" -ForegroundColor Cyan
Write-Host ""
Write-Host "üöÄ Para ejecutar:" -ForegroundColor White
Write-Host "  cd cmd\server-manager" -ForegroundColor Yellow
Write-Host "  .\server-manager.exe" -ForegroundColor Yellow
Write-Host ""
Write-Host "üåê Interfaz web:" -ForegroundColor White
Write-Host "  http://localhost:8772" -ForegroundColor Yellow
Write-Host ""
Write-Host "üîë Credenciales por defecto:" -ForegroundColor White
Write-Host "  Usuario: admin" -ForegroundColor Yellow
Write-Host "  Contrase√±a: changeme (¬°cambiar en config.yml!)" -ForegroundColor Yellow
Write-Host ""
Write-Host "üìñ Para m√°s informaci√≥n, consulta BUILD_GUIDE.md" -ForegroundColor Cyan
